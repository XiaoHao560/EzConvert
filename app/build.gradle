plugins {
    id 'com.android.application'
}

def getGitVersionCode() {
    try {
        def commitCount = getCmdOutput("git rev-list --count HEAD").toInteger()
        def timestamp = new java.text.SimpleDateFormat("yyMMdd").format(new Date()).toInteger()
        def versionCode = timestamp * 1000 + (commitCount % 1000)
        
        println "=== VersionCode Generation ==="
        println "Build Date: ${new Date()}"
        println "Git Commit Count: $commitCount"
        println "Timestamp (YYMMDD): $timestamp"
        println "Generated VersionCode: $versionCode"
        
        return versionCode
        
    } catch (Exception e) {
        println "Warning: Could not get git version code: ${e.message}"
        def fallback = new java.text.SimpleDateFormat("yyMMddHH").format(new Date()).toInteger()
        println "Using fallback version code: $fallback"
        return fallback
    }
}

def getGitVersionName() {
    try {
        def branchName = getCmdOutput("git rev-parse --abbrev-ref HEAD")
        def commitHash = getCmdOutput("git rev-parse --short HEAD")
        def describe = getCmdOutput("git describe --tags --long --always")
        
        println "=== VersionName Generation ==="
        println "Git Branch: $branchName"
        println "Git Describe: $describe"
        println "Commit Hash: $commitHash"
        
        if (describe.contains("0.1.7-alpha")) {
            println "Detected specific old alpha tag 0.1.7-alpha, using base version 0.2.0"
            return getVersionFromBranch(branchName, commitHash)
        }
        
        if (describe.matches("^v?\\d+(\\.\\d+)*\$")) {
            def version = describe.replaceAll("^v", "")
            return isMainBranch(branchName) ? version : "${version}-${getSafeBranchName(branchName)}"
        }
        else if (describe.matches(".*-\\d+-g[0-9a-f]+\$")) {
            def parts = describe.split("-")
            def baseVersion = parts[0].replaceAll("^v", "")
            def commitsAfterTag = parts[1]
            
            if (commitsAfterTag == "0") {
                return baseVersion
            }
            
            def suffix = isMainBranch(branchName) ? "" : "-${getSafeBranchName(branchName)}"
            return "${baseVersion}.${commitsAfterTag}${suffix}"
        }
        else {
            return getVersionFromBranch(branchName, commitHash)
        }
        
    } catch (Exception e) {
        println "Error getting git version name: ${e.message}"
        return "0.2.0-dev"
    }
}

def getVersionFromBranch(branchName, commitHash) {
    def safeBranchName = getSafeBranchName(branchName)
    if (isMainBranch(branchName)) {
        return "0.2.0-${commitHash}"
    } else {
        return "0.2.0-${safeBranchName}(${commitHash})"
    }
}

def getSafeBranchName(branchName) {
    return branchName
        .replaceAll("[^a-zA-Z0-9.-]", "-")
        .replaceAll("^-+|-+\$", "")
        .replaceAll("-+", "-")
        .toLowerCase()
        .take(15)
}

def isMainBranch(branchName) {
    return branchName == "main" || branchName == "master"
}

def getCmdOutput(command) {
    def stdout = new ByteArrayOutputStream()
    try {
        exec {
            commandLine command.split(' ')
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        throw e
    }
}

task printVersionInfo {
    doLast {
        println "=== Project Version Information ==="
        println "Version Code: ${getGitVersionCode()}"
        println "Version Name: ${getGitVersionName()}"
        
        try {
            def branchName = getCmdOutput("git rev-parse --abbrev-ref HEAD")
            def commitHash = getCmdOutput("git rev-parse --short HEAD")
            def describe = getCmdOutput("git describe --tags --long --always")
            
            println "Git Branch: $branchName"
            println "Git Commit: $commitHash"
            println "Git Describe: $describe"
        } catch (Exception e) {
            println "Cannot get Git information: ${e.message}"
        }
    }
}

android {
    namespace 'com.tech.ezconvert'
    compileSdk 33

    defaultConfig {
        applicationId "com.tech.ezconvert"
        minSdk 24
        targetSdk 33
        
        versionCode getGitVersionCode()
        versionName getGitVersionName()
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        
        ndk {
            abiFilters 'arm64-v8a'
        }
    }
    
    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_FILE") ?: "debug.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version "3.22.1"
        }
    }
    
    ndkVersion "24.0.8215888"
    
    packagingOptions {
        pickFirst '**/libc++_shared.so'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    //implementation 'com.arthenica:mobile-ffmpeg-full:4.4.LTS'
    //implementation 'com.github.jiusanzhou:mobile-ffmpeg-mediacodec:4.4.LTS.1'
    //implementation 'com.github.arthenica:mobile-ffmpeg:full-gpl-4.4.LTS'
    //implementation files('libs/mobile-ffmpeg-full-gpl-4.4.LTS.aar')
    implementation 'com.arthenica:ffmpeg-kit-full-gpl:6.0-2'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

preBuild {
    doFirst {
        println "Build Info: ${getGitVersionName()} (${getGitVersionCode()})"
    }
}